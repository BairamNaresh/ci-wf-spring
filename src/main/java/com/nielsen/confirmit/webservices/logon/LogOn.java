package com.nielsen.confirmit.webservices.logon;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.4
 * 2019-11-07T17:53:23.884+05:30
 * Generated source version: 3.3.4
 *
 */
@WebServiceClient(name = "LogOn",
                  wsdlLocation = "file:/E:/Nielson Project/Projects/Test/confirmit/src/main/resources/wsdl/logon_18_0.wsdl",
                  targetNamespace = "http://firmglobal.com/Confirmit/webservices/")
public class LogOn extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://firmglobal.com/Confirmit/webservices/", "LogOn");
    public final static QName LogOnSoap12 = new QName("http://firmglobal.com/Confirmit/webservices/", "LogOnSoap12");
    public final static QName LogOnSoap = new QName("http://firmglobal.com/Confirmit/webservices/", "LogOnSoap");
    static {
        URL url = null;
        try {
            url = new URL("file:/E:/Nielson Project/Projects/Test/confirmit/src/main/resources/wsdl/logon_18_0.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LogOn.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/E:/Nielson Project/Projects/Test/confirmit/src/main/resources/wsdl/logon_18_0.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LogOn(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LogOn(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LogOn() {
        super(WSDL_LOCATION, SERVICE);
    }

    public LogOn(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LogOn(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LogOn(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns LogOnSoap
     */
    @WebEndpoint(name = "LogOnSoap12")
    public LogOnSoap getLogOnSoap12() {
        return super.getPort(LogOnSoap12, LogOnSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LogOnSoap
     */
    @WebEndpoint(name = "LogOnSoap12")
    public LogOnSoap getLogOnSoap12(WebServiceFeature... features) {
        return super.getPort(LogOnSoap12, LogOnSoap.class, features);
    }


    /**
     *
     * @return
     *     returns LogOnSoap
     */
    @WebEndpoint(name = "LogOnSoap")
    public LogOnSoap getLogOnSoap() {
        return super.getPort(LogOnSoap, LogOnSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LogOnSoap
     */
    @WebEndpoint(name = "LogOnSoap")
    public LogOnSoap getLogOnSoap(WebServiceFeature... features) {
        return super.getPort(LogOnSoap, LogOnSoap.class, features);
    }

}
